// Builds a Ghidra Extension for a given Ghidra installation.
//
// An absolute path to the Ghidra installation directory must be supplied either by setting the
// GHIDRA_INSTALL_DIR environment variable or Gradle project property:
//
//     > export GHIDRA_INSTALL_DIR=<Absolute path to Ghidra>
//     > gradle
//
//         or
//
//     > gradle -PGHIDRA_INSTALL_DIR=<Absolute path to Ghidra>
//
// Gradle should be invoked from the directory of the project to build.  Please see the
// application.gradle.version property in <GHIDRA_INSTALL_DIR>/Ghidra/application.properties
// for the correction version of Gradle to use for the Ghidra installation you specify.

//----------------------START "DO NOT MODIFY" SECTION------------------------------
def ghidraInstallDir

if (System.env.GHIDRA_INSTALL_DIR) {
	ghidraInstallDir = System.env.GHIDRA_INSTALL_DIR
}
else if (project.hasProperty("GHIDRA_INSTALL_DIR")) {
	ghidraInstallDir = project.getProperty("GHIDRA_INSTALL_DIR")
}
import org.gradle.api.GradleException
if (ghidraInstallDir) {
	// parse <ghidraInstallDir>/Ghidra/application.properties to get the version of Gradle to use (it has the format `application.gradle.min=7.3` and `application.gradle.max=9.1`)
	def applicationProperties = new Properties()
	applicationProperties.load(new FileInputStream(new File(ghidraInstallDir).getCanonicalPath() + "/Ghidra/application.properties"))
	def gradleMin = applicationProperties.getProperty("application.gradle.min")
	def gradleMax = applicationProperties.getProperty("application.gradle.max")
	// check if the current Gradle version is compatible with the Ghidra installation
	def gradleVersion = GradleVersion.current()
	if ((gradleMin != '' && gradleVersion < GradleVersion.version(gradleMin)) || (gradleMax != '' && gradleVersion > GradleVersion.version(gradleMax))) {
		throw new GradleException("Gradle version " + gradleVersion + " is not compatible with Ghidra version " + gradleMin + " to " + gradleMax + ".  Please use Gradle version " + gradleMin + " to " + gradleMax + ".")
	}

	apply from: new File(ghidraInstallDir).getCanonicalPath() + "/support/buildExtension.gradle"
}
else if (project.hasProperty("task") && project.getProperty("task").equals("build")) {
	throw new GradleException("GHIDRA_INSTALL_DIR is not defined!")
}

//----------------------END "DO NOT MODIFY" SECTION-------------------------------

import org.gradle.plugins.ide.eclipse.model.Library

apply plugin: 'java'
apply plugin: 'eclipse'

def pathToGhidra = new File(ghidraInstallDir).getCanonicalPath()

eclipse {
	classpath {
		file {
			whenMerged {
				def lib = entries.find { it.path.contains 'SoftwareModeling.jar' }
				lib.javadocPath = fileReference(file("{pathToGhidra}/docs/GhidraAPI_javadoc.zip"))
				lib.sourcePath = fileReference(file("{pathToGhidra}/Ghidra/Framework/SoftwareModeling/lib/SoftwareModeling-src.zip"))
			}
		}
	}
}
